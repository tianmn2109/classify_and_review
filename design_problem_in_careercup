1: Suppose you want to design a application which will be receiving thousands of requests from many clients.
   And Application need to update received infomration to different servers in real time. What mechanism will you use? 
  
  For ex. Your application receives thousands of requests shares values along with exchange name from different client 
  and application need pass it to different exchange servers ex. Mumbai Exchange, NSE and few more. 
  Application need to pass information to specific servers in real time. 

  Here is sample data your application will receive in fraction of seconds from mutiple clients. 
  110 share1 BOMEXCHG 
  222 share2 BOMEXCHG 
  5677 share3 NSE 
  5690 share3 BOMEXCHG 
  : 
  : 
  :
  link: http://www.careercup.com/question?id=6313784551407616
  
  answer: 
  1:Queue mechanism with Event based architecture could be the better option.
  2: Goldman Sachs is still trying to Hire, eh? 
     It is a trivial problem with a very trivial solution.
     The precise formulation is this.
     Get a proxy for all exchanges - you can call them event sink so if you please.
     All are almost identical to one another.
     Get the file and send the data to the specific exchange proxy. You are done.
     The individual exchange proxies are command processors.

---------------------------------------------------------------------------------------------------------------------
     
2: Design an Email sender, need to send 100,000000 emails and you have 5 machines how could you do it efficiently.
  : 设计系统时，从以下几个方面分析：
      系统中有哪些对象，每个对象提供什么服务，最好能用API或者函数名写出服务，或者功能模块。
  link: http://www.careercup.com/question?id=6257006711144448
  
  answer:
  I think the interviewer was expecting a lot of questions to clarify. Sometimes, they keep the questions vague 
     intentionally.
  I am only going to consider the information provided here by OP and post my thoughts.

Requirements:
-> Send 100 Million emails (don't know the time frame, but assuming 1 day for now)
-> 5 machines to send emails. Client machine who sends the email is not included here
-> All machines are of same processing power

Let's go top down:

-> 100 Million emails can be divided into 5 machines, not necessary uniform, but approximately it would translate to 20 M 
  per machine
-> 20 M / 24 hours means 231 emails per sec
-> This means that there are 231 QPS required approximately for a single machine on an average

Email Service:
-> A service that would accept messages via open socket connection
-> Validates the message before sending it asynchronously 
-> Sends response back to caller/client with success failure. In case of failure, it sends appropriate Error messages
-> Has retry mechanism for certain types of errors (e.g. network error)
-> Uses message queuing system like Rabbit MQ to send messages (RabbitMQ can convert SMTP messages to AMQP) to send emails
-> You don't need this really since you are using Rabbit MQ, but can implement throttling using token bucket algorithm

Email Client Lib:
1. Validates the email content before sending it to Email Service (e.g. maximum size of attachment, parameters of the email,
etc.)
2. Compresses the message before sending to reduce network traffic
3. Retry logic in certain failure scenarios (e.g. in case email sever is busy, it can back off before retrying)

Client API can include following steps:
1. Setting SMTP Client : SetUpEmail(host, port, enableSSL, deliveryMethod, credentials)
2. Setting up Email: CreateEmail(sourceEmail, destEmail, subject, body, attachment)

Email Service APIs can be created in a similar way. I guess the idea here is to design than code. 

As of security, SMTP requires credentials. We are also compressing the packet while sending it on network and using SSL 
to send email. Should be pretty safe. You can add encryption from client to server in addition to compression, if your
email includes unicode characters.

We can discuss about the challenges of this design:
1. Availability: One of the machines might go down affecting the performance
2. Scalability: You can add more machines to make it scalable, but then you would have to update your design accordingly.

--------------------------------------------------------------------------------------------------------------------------

3：How would you design a price tracking website like camelcamelcamel.com? 
   For example, we might want the following behavior. Input: Item URL and target price. 
   Result: if the item goes below the target price, then users tracking the item will get an email alert. 

   Consider the following topics in the answer: database design (SQL or NoSQL), automated price checking mechanism, price scraping or price API, caching data.

   link： http://www.careercup.com/question?id=5734770984091648
   
   Following is the minimal DB design required to support the requirement

UserPriceTrackingData
User_id | Item_id | Price limit | expiry_date

ItemPrice
Item_id | Price

User
User_id | User_email

API's exposed:
1) UpdatePrice, params: item_id, price
Prices will be updated using UpdatePrice api and will be stored in ItemPrice table.
2) AddTrackingData, params: user_id, item_id, tracking price
User can enter price tracking data using AddTrackingData will be stored in UserPriceTrackingData with request 
expiry_date set to, say, 30 days later. If the price is already below the tracking price, a email is sent straightaway.

Worflow:
Whenever UpdatePrice is called to update the price, a background task will try match the UserPriceTrackingData entry 
for the item with tracking price larger than the new price. If a match is found, an email is sent.To expedite it, 
we can cache the tracking data for the most frequently updated items.
  
----------------------------------------------------------------------------------------------------------------------

4：Design a push notification system for android. Assume that we have 1 million users this year, 
　　but next year we will have 15 million. Assume that Google can handle infinite notifications per second. 

　I would love to see this answered, as I did not answer it well.  
　
　link: http://www.careercup.com/question?id=5167925411446784
　
　answer:
　Let's start with definition what is "push notification". We can define it as "A push notification is a message delivered 
　by a centralized server to an endpoint device." In our case the endpoint device is an android device. Then we need to 
　figure out how a device will receive a message. One of the simple approaches could be to open socket to listen messages 
　from server when the device is up. It may be performed by system or a special system application. So the device tries 
　to reach server by general DNS name like push.android.com. Initial requests to open connection goes through load balancer 
　and is delegated to one of servers behind balancer. That will help us to extend number of servers to support more clients 
　without affects to architecture. There are connection timeout handlers, we can assign to this handlers initialization of 
　connection. Thus if a server is down all its client will get event that connection is closed and it leads to new 
　establishing of connection again though the load balancer. It is worth also to support redundancy for load balancer level. 
  Now it is time to discuss what is 'a message'. Nowaday this is usual thing to base the message format on XML or JSON. Cons
  of this approach in comparing with binary format is increasing of data transfer size, but because it is not anticipated to 
  have long message this should be OK. 
  The last question is a conception of guarantee delivery. By default we include guarantee delivery in scope that means 
  if a server gets down or a device is not available then we don't send notification although a client of your push 
  notification solution sends notification. This is not so good. To resolve this case we should introduce persistence 
  layer to keep messages and delivery statuses. When a client of our push notification solution initiates sending a message
  we create a row in DB. Then the server which is responsible to send message for the specified device pick up the row and 
  tries to send it to device and is waiting for acknowledgement. When acknowledgement is getting back to the server it 
  updates row to reflect successful delivery.
