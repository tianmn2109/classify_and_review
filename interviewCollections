1:
//JD
虚函数默认参数问题

#include <iostream>
using namespace std;

class A{
public:
    virtual void f(int a=3){ cout << "A: " << a << endl;}
};
class B:public A{
public:
    virtual void f(int a=5){ cout << "B: " << a << endl;}
};

int main(void){ 
    B b;
    b.f();  //B: 5
    A * a = &b;
    a->f(); //B: 3
    return 0;
}

//Reference: http://www.geeksforgeeks.org/output-of-c-program-set-12-2/
/*
We observe that f() of derived class is called and default value of base class f() is used.
The default value is used at compile time. When compiler sees that an argument is missing
in a function call, it substitutes the default value given. Therefore, in the above program,
value of x is substituted at compile time, and at run time derived class’s fun() is called.
In general, it is a best practice to avoid default values in virtual functions to avoid confusion.
*/


2:
//JD
下面程序的运行结果是什么？
int main(void){
    int n[][3] = {10, 20, 30, 40, 50, 60};
    int (*p)[3];
    p = n;
    cout << p[0][0] << ", " << *(p[0]+1) << ", " << **(p+1) << ", " << *(p+1) << ", " << (*p)[2] << endl;
    cout << "sizeof(p): " << sizeof(p) << endl;
    cout << "sizeof(*p): " << sizeof(*p) << endl;
    cout << "sizeof(p[0]): " << sizeof(p[0]) << endl;
    return 0;
}

/*
//Output:
lxw classify_and_review$ ./a.out 
10, 20, 40, 0xbfe6d2e4, 30
sizeof(p): 4
sizeof(*p): 12
sizeof(p[0]): 12
lxw classify_and_review$ 
*/

3:
//IQIYI
#include <iostream>
using namespace std;

class A{
public:
	virtual void f(){cout << "A::f()" << endl;}
};

class B : public A{
public:
	virtual void f(){cout << "B::f()" << endl;}
	void g(){cout << "B::g()" << endl;}
};
int main(void){
	B b;
	A * a = &b;
	a->f();		//B::f()
	b.g();		//B::g()
	//a->g(); //compile error.
	a->A::f();	//NOTE: A::f()
	return 0;
}

/*
lxw ~$ ./a.out 
B::f()
B::g()
A::f()
*/
