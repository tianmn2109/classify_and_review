1: 构造函数和析构函数
    复制构造函数被调用的场合：1：对象被返回。2：对象以传值方式作为函数的参数。
                              3：一个对象以另一个对象为初始值构造。4：编译器产生一个临时对象。
    需要用户自定义复制构造函数的场合：对象含有运行时分配的资源如空间，文件句柄，网络连接等。
    复制构造造造函数可以私有。
    复制构造函数必须以传引用的方式，否则当传值方式传递时，由于函数以传值方式需要调用构造函数，因此会形成调用的递归链。
    复制构造函数参数是const形式，因为1：不应该改变参数的值应将参数设置为const形式。
                                     2：编译器创建的临时对象不能绑定到非const的引用上。因此临时对象随时可能被销毁，
                                        因此修改其无意义。
                                        Test t2 = fun();  此时用func的返回值作为复制构造函数的参数，而返回的临时对象，
                                        所以必须是const类型否则编译器报错。改成Test t2; t2 = fun();不会报错。
    初始化列表对类进行初始化时，按照成员变量在类中的声明顺序初始化。
    使用初始化列表的场合：1:初始化非常量静态数据成员。
                          2：初始化引用数据成员。
                          3：初始化无默认构造函数的成员对象。//此处有疑问
                          4：初始化基类数据成员。
                          5：构造函数参数的名称与成员变量的的名称相同。
                          6: 性能原因。
        析构函数：#include <iostream>
                  using namespace std;
                  int i;
                  class A
                  {
                    public:
                      ~A(){ i=10; } 
                  };
  
                  int foo()
                  {
                    i=3;
                    A ob;
                    return i;
                  }

                  int main()
                  {
                      cout << "i = " << foo() << endl;
                      return 0;
                  }
                  输出结果为3， 因为析构函数是函数最后调用的函数，先return，后调用析构函数。
                  如果要输出10，可以返回引用。
          构造函数：
                  及时用户只实现了复制构造函数，编译器也不会在创建默认的构造函数。反之则不是。
        构造函数不能为虚函数，否则编译器会报错，构造函数最多只能由inline修饰。
        因为c++是静态类型语言，对象的类型是对象在创建的时候由编译器决定的。
        
虚函数：
        1： 默认参数和虚函数。
            默认参数不参与函数签名。所以函数签名只与函数名字有关。默认参数在编译时确定。
            下个例子中，x的值在编译时确定，而func则在运行时确定。结果输出Derived::func(), x = 10.
            class Base
            {
            public:
                virtual void fun ( int x = 0)
               {
                   cout << "Base::fun(), x = " << x << endl;
               }
            };
 
            class Derived : public Base
            {
            public:
               virtual void fun ( int x = 10 ) // NOTE THIS CHANGE
               {
                  cout << "Derived::fun(), x = " << x << endl;
              }
            };
 
 
            int main()
            {
               Derived d1;
              Base *bp = &d1;
               bp->fun();
               return 0;
            }
        静态成员函数不能是虚函数，同样不能用const，volatile来修饰静态成员函数。
        如果通过类对象调用虚函数，因为在编译时就知道了要调用的函数，此时虚函数可以inline。
        而通过指针或者引用调用虚函数是在运行时才能确定调用哪个函数，在这种情况下虚函数不能inline。
        但是在虚函数前加上inline编译器不会报错，是否进行内联，由编译器最终决定。
        纯虚析构函数，必须实现析构函数，因为先调用派生类析构函数在调用基类析构函数，如果没有实现析构函数，
        编译器不知道调用什么。有纯虚析构函数的类是抽象类，虽然其实现了析构函数。
        RTTI (Run-time type information) 要求类中必须有虚函数，只有含有虚函数才有运行时类型信息
        这也就是为什么dynamic_cast要求基类有虚函数。
        
3： 继承
    派生类没有继承父类的东西：基类的构造函数和析构函数2：基类的友元。
    虚继承解决多重继承重复的问题。
    类的成员函数的访问权限是编译时确定的。
    class Base {
        public://改成private编译错误
	            virtual int fun(int i) { cout << "Base::fun(int i) called"; }
            };

    class Derived: public Base {
        private:
            	int fun(int x) { cout << "Derived::fun(int x) called"; }
        };

        int main()
        {   
        	Base *ptr = new Derived;
        	ptr->fun(10);//编译时确定，基类指针，基类是公有，运行时调用派生类的函数
        	return 0;
        }
    如果在派生类中重新定义基类中的方法，则派生类中同名的函数都会被隐藏，即使他们有不同的参数（此种情况下函数签名不同）。
4:友元
	友元不能继承，c++中友元和java中友元不同。
5: this 指针
	this在累的非静态成员函数中自动添加，对于类X，成员函数为X * const指针， 对于const成员函数，this为
	const X * const。
	class Test
	{
		private:
			int x;
			int y;
		public:
			Test (int x = 0, int y = 0) { this->x = x; this->y = y; }
			Test setX(int a) { x = a; return *this; }//返回引用后就可以输出10,20
			Test setY(int b) { y = b; return *this; }
			void print() { cout << "x = " << x << " y = " << y << endl; }
	};

	int main()
	{
		Test obj1;
		obj1.setX(10).setY(20); //因为返回的不是引用，所以是一个临时对象，并在这个对象上调用setY
		obj1.print();
		return 0;
	}
	输出10， 0
	delete this指针：
	1：this对象是必须是用 new操作符分配的（而不是用new[]，也不是用placement new，
		也不是局部对象，也不是global对象）；
	2：delete this后，不能访问该对象任何的成员变量及虚函数（delete this回收的是数据，
		这包括对象的数据成员以及vtable，不包括函数代码）；
	3：delete this后，不能再访问this指针。换句话说，你不能去检查它、将它和其他指针
		比较、和 NULL比较、打印它、转换它，以及其它的任何事情；
	delete的对象必须是new出来的。
	当对象是new出来的delete this可以。但是如果对象不是new出来的，例如是临时对象，则会引发未定义行为，崩溃。
	delete this之后 虚函数不能再访问，因为虚函数指针已经被删除，会导致未定义行为，崩溃。
	但是普通的成员函数或者静态成员函数，静态变量都可以访问。这个是编译时确定的，虚函数的调用是运行时确定的。
6： static
	静态成员函数不能用const，volatile修饰。因为没this指针。
	静态数据成员http://www.geeksforgeeks.org/stati/  重要。
	class A
	{
	public:
		 A() { cout << "A's Constructor Called " << endl;  }
	};
	class B
	{
    		static A a;//此处只声明，未定义
	public:
    		B() { cout << "B's Constructor Called " << endl; }
	};
	int main()
	{
    	B b;
    	return 0;
	}
	输出 B's Constructor Called
	
	class A
	{
    		int x;
	public:
    		A() { cout << "A's constructor called " << endl;  }
	};
 
	class B
	{
    		static A a;
	public:
    		B() { cout << "B's constructor called " << endl; }
    		static A getA() { return a; }	
	};
 
	A B::a;  // definition of a， 此处定义a
 
	int main()
	{
    	B b1, b2, b3;
    	A a = b1.getA();
	  return 0;
	}
	输出
	A's constructor called
	B's constructor called
	B's constructor called
	B's constructor called
7: 类和对象
	类中不能含有此类的数据成员，但可以含有此类类型的静态数据成员和指针。
	空的类为1.不为0是保证两个不同的对象有不同的地址。
8：delete
	delete NULL没问题，但是不能删除栈上分配的对象。
9:重载 
	c++中成员函数的重载不能发生在基类和派生类之间。
   	c++中不能重载main， 如果要重载main，可以将其作为类的成员函数。
10： 操作符重载
	赋值操作符可以被继承。
	++a 返回的是引用，a++返回的 是临时变量。
	编译器不会自动创建默认的赋值运算符的情况。
	1：类中含有非静态的常量或者引用。
	2：类中有个数据成员，此成员的复制赋值操作不可用。
	3：此类从基类派生而来，但基类，没有copy函数不访问。
	流操作符重载：必须是全局函数，如果要访问类的私有数据成员，应该将其设置为friend函数。
	#include <iostream>
	using namespace std;
 
	class Complex
	{
	private:
    		int real, imag;
	public:
	 	Complex(int r = 0, int i =0)
    		{  real = r;   imag = i; }
		 friend ostream & operator << (ostream &out, const Complex &c);
    		friend istream & operator >> (istream &in,  Complex &c);
	};
 
	ostream & operator << (ostream &out, const Complex &c)
	{
		 out << c.real;
    		out << "+i" << c.imag << endl;
	 	return out;
	}
 
	istream & operator >> (istream &in,  Complex &c)
	{
    		cout << "Enter Real Part ";
    		in >> c.real;
		 cout << "Enter Imagenory Part ";
		 in >> c.imag;
		 return in;
	}
 11： 异常：
 	catch中，派生类要在基类对象的前面。
 12：misc
 	常量对象不能调用非const函数。
        局部类不可以包含静态成员函数，但是可以包含静态类。
 -----------------------------------------------------------------------------------------
 程序的输出
 -----------------------------------------------------------------------------------------
 #include<iostream>
 
using namespace std;
class Base1 {
 public:
     Base1()
     { cout << " Base1's constructor called" << endl;  }
};
 
class Base2 {
 public:
     Base2()
     { cout << "Base2's constructor called" << endl;  }
};
 
class Derived: public Base1, public Base2 {
   public:
     Derived()
     {  cout << "Derived's constructor called" << endl;  }
};
 
int main()
{
   Derived d;
   return 0;
}
Ouput:
Base1’s constructor called
Base2’s constructor called
Derived’s constructor called
-----------------------------------------------------------------------------------
#include<iostream>
using namespace std;
 
class base {
  int arr[10];     
};
 
class b1: virtual public base { };
 
class b2: virtual public base { };
 
class derived: public b1, public b2 {};
 
int main(void)
{ 
  cout<<sizeof(derived);
  getchar();
  return 0;
}
Output：48
-----------------------------------------------------------------------------------
#include<iostream>
using namespace std;
 
class Test
{
public:
  Test();
};
 
Test::Test()  {
    cout<<"Constructor Called \n";
}
 
int main()
{
    cout<<"Start \n";
    Test t1();
    cout<<"End \n";
    return 0;
}
Output: 
Start
End
// reason: Note that the line “Test t1();” is not a constructor call. Compiler considers this line as declaration
of function t1 that doesn’t recieve any parameter and returns object of type Test.
-----------------------------------------------------------------------------------------------------------------
#include<iostream>
 
using namespace std;
 
class Test {
    int &t;
public:
    Test (int &x) { t = x; }
    int getT() { return t; }
};
 
int main()
{
    int x = 20;
    Test t1(x);
    cout << t1.getT() << " ";
    x = 30;
    cout << t1.getT() << endl;
    return 0;
}
Output: Compiler Error
Since t is a reference in Test, it must be initialized using Initializer List. Following is the modified program. 
It works and prints “20 30″.

#include<iostream>
 
using namespace std;
 
class Test {
    int &t;
public:
    Test (int &x):t(x) {  }
    int getT() { return t; }
};
 
int main() {
    int x = 20;
    Test t1(x);
    cout << t1.getT() << " ";
    x = 30;
    cout << t1.getT() << endl;
    return 0;
}
----------------------------------------------------------------------------------------------------------------
#include<iostream>
#include<string.h>
using namespace std;
 
class String
{
    char *p;
    int len;
public:
    String(const char *a);
};
 
String::String(const char *a)
{
    int length = strlen(a);
    p = new char[length +1];
    strcpy(p, a);
    cout << "Constructor Called " << endl;
}
 
int main()
{
    String s1("Geeks");
    const char *name = "forGeeks";
    s1 = name;
    return 0;
}
Output:

Constructor called
Constructor called
The first line of output is printed by statement “String s1(“Geeks”);” and the second line is printed by 
statement “s1 = name;”. The reason for the second call is, a single parameter constructor also works as 
a conversion operator 
--------------------------------------------------------------------------------------------------------
#include<iostream>
using namespace std;
 
class Base 
{
public:
    int fun()      { cout << "Base::fun() called"; }
    int fun(int i) { cout << "Base::fun(int i) called"; }
};
 
class Derived: public Base 
{
public:
    int fun(char x)   { cout << "Derived::fun(char ) called"; }
};
 
int main() 
{
    Derived d;
    d.fun();
    return 0;
}
Output: Compiler Error.
In the above program, fun() of base class is not accessible in the derived class. If a derived class creates 
a member method with name same as one of the methods in base class, then all the base class methods with this 
name become hidden in derived class (See this for more details)
-------------------------------------------------------------------------------------------------------------
#include <iostream>
using namespace std;
 
template <int i>
int fun()
{
   i =20; 
}
 
int main() {
   fun<4>();
   return 0;
}
The value of nontype parameters must be constant as they are used at compile time to create instance of 
classes/functions. In the above program, templated fun() receives a nontype parameter and tries to modify 
it which is not possible. Therefore, compiler error.
